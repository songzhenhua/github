阿伦・培智， 肯・约翰斯顿， BJ・罗里森著

随机测试ad-hoc

探索性测试ET,Exploratory testing:能够有效地对软件的操作、能力和整体可用性给出一个初步的、宏观的总体评价。适用于小型的软件项目、发行范围有限的软件以及有效期不长的软件；不适合大型的复杂项目，或是任务非常关键的软件

边界值分析（boundary value analysis， BVA）
等价类划分（equivalence class partitioning，ECP）
基准测试BC
正交适用于相互依赖的参数可变组合

P118
块测试是用于单元测试的一种普遍方法，它非常适合于迅速地评估某函数的基本功能。
决策测试对条件子句求值，根据条件为真或假，简单的布尔表达式就可以确定控制流程的分支

P124
条件测试旨在评估复合语句每个子表达式的真假结果。因为微软的惯例是执行‘短路’的，所以条件测试不验证复合条件语句的真假结果的所有组合
基础路径测试试图遍历程序中所有可能的途径。

P133
基础路径测试：每一个条件语句的每个结果必须被独立的测试

第7章
代码复杂度，一般情况下代码复杂度越高BUG可能出现的几率越大，从而将主要精力用在代码复杂度高的功能上

第8章
最刚开始时建模，从简单功能的小模型开始；并非所有情况都适合建模，且大模型是很难难搞的。

P184
为何不能使用缺陷数量做为绩效度量：其做为参考的价值是非常有限的，缺陷数据具有太多的可变性，如：所测功能的复杂性、开发人员编程能力、规格完整性、缺陷预防与缺陷发现、报告的及时性。
必须理解该标准的参数和考虑到诸如如下的问题：
?报告的缺陷具有什么严重性和优先度,分布如何？ 
?功能缺陷与简单的用户界面缺陷一样算数量吗？
?花费时间（一天或几天）追踪一个关键问题（如数据丢失，内存泄漏）并使之得到解决，这能说明没有达到预期或业绩表现差吗？如果是，什么是团队合作的政策，即协助开发人员排解疑难问题？ 
?缺陷质量是一个因素吗？如果是的话，在团队里，这些具体因素是如何决定缺陷的？团队平均值是什么？平均数是目标吗？哪些具体的因素是超过预期的目标？ 
?每一次评比，最低的缺陷数量是什么？什么样的缺陷数量是测试人员超过期望的数量？发现了大量的缺陷可能表明测试人员做的很好，或者它可能意味着开发人员编写的代码很差。反之，如果一个测试人员找到很少的缺陷，这可能是一个迹象:表明他做得不理想，也可能意味着他正在测试高质量的代码，具有较低的缺陷密度。所以关键是怎样解读数据，这也意味着可能需要额外的个案调查。

P296
尽量让每个测试工程师独立拥有一个测试环境，这样，每个测试工程师才敢任意的天马行空的去大胆的测试或做破坏性的测试。至少，也应该也让测试工程师们拥有一个测试环境，而不是和开发共同拥有一个环境，这样测试工程师被很多规则所约束、限定。

使用虚拟机的优势：节省管理员时间，减少物理检查与配置，节省钱和空间；在测试上，可以保存VM拷贝，当测试破坏掉虚拟机或是想回退到之前的状态，可以轻松实现。
在金山时的实践：1.使用GHOST备份机器装完系统后的状态，分别测试未装/装完显卡驱动时游戏安装提示及正常显示，进行下次测试时，恢复到备份前的状态。
2.使用VMWARE和Hyper-V创建虚拟机，备份WINDOWS和LINUX装完系统、ORACLE、JBoss等环境后拷贝，当某虚拟机损失不可恢复或其他人员需要新的环境时，可快速提供一份完好如初系统环境。

P333
质量成本：不是生产优质产品或服务的花费，而是“未能”生产优质产品或服务的代价。
英雄行为：当产品因为质量问题将不能如期上线时，偶尔会有一位工程师或经理级的超级明星，能够接手这些最后的改动中的一个，迎难而上，披荆斩棘，开辟道路并到达成功。然后我们就尊奉他为英雄。并且其他每个想成为英雄的人都会说：“噢，在这儿那才是让人看重的。”先前几个月所做的日常工作被认为不重要，测试并在问题发生之前消除它们也被认为不重要。被认为重要的却是在最后时刻做改动再强行把它们弄通。